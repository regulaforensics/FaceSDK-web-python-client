# coding: utf-8

"""
    Regula FaceSDK Web API

    Regula FaceSDK Web API  # noqa: E501

    The version of the OpenAPI document: 3.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from regula.facesdk.webclient.gen.configuration import Configuration


class Align(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'FaceAlignTypeQuality',
        'pad': 'list[int]',
        'crop_size': 'list[int]'
    }

    attribute_map = {
        'type': 'type',
        'pad': 'pad',
        'crop_size': 'cropSize'
    }

    def __init__(self, type=None, pad=None, crop_size=None, local_vars_configuration=None):  # noqa: E501
        """Align - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._pad = None
        self._crop_size = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if pad is not None:
            self.pad = pad
        if crop_size is not None:
            self.crop_size = crop_size

    @property
    def type(self):
        """Gets the type of this Align.  # noqa: E501


        :return: The type of this Align.  # noqa: E501
        :rtype: FaceAlignTypeQuality
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Align.


        :param type: The type of this Align.  # noqa: E501
        :type type: FaceAlignTypeQuality
        """

        self._type = type

    @property
    def pad(self):
        """Gets the pad of this Align.  # noqa: E501


        :return: The pad of this Align.  # noqa: E501
        :rtype: list[int]
        """
        return self._pad

    @pad.setter
    def pad(self, pad):
        """Sets the pad of this Align.


        :param pad: The pad of this Align.  # noqa: E501
        :type pad: list[int]
        """

        self._pad = pad

    @property
    def crop_size(self):
        """Gets the crop_size of this Align.  # noqa: E501

        The resize value in case type matches this value. It it doesn't match, no resize is done.  # noqa: E501

        :return: The crop_size of this Align.  # noqa: E501
        :rtype: list[int]
        """
        return self._crop_size

    @crop_size.setter
    def crop_size(self, crop_size):
        """Sets the crop_size of this Align.

        The resize value in case type matches this value. It it doesn't match, no resize is done.  # noqa: E501

        :param crop_size: The crop_size of this Align.  # noqa: E501
        :type crop_size: list[int]
        """

        self._crop_size = crop_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Align):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Align):
            return True

        return self.to_dict() != other.to_dict()
