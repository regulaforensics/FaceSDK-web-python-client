# coding: utf-8

"""
    Regula FaceSDK Web API

    Regula FaceSDK Web API  # noqa: E501

    The version of the OpenAPI document: 3.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from regula.facesdk.webclient.gen.configuration import Configuration


class DetectionQuality(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aligned': 'bool',
        'compliant': 'bool',
        'non_compliant': 'list[FaceQualityConfigName]',
        'details_groups': 'list[QualityDetailsGroups]',
        'details': 'list[QualityDetail]',
        'resized': 'bool',
        'score': 'float'
    }

    attribute_map = {
        'aligned': 'aligned',
        'compliant': 'compliant',
        'non_compliant': 'nonCompliant',
        'details_groups': 'detailsGroups',
        'details': 'details',
        'resized': 'resized',
        'score': 'score'
    }

    def __init__(self, aligned=None, compliant=None, non_compliant=None, details_groups=None, details=None, resized=None, score=None, local_vars_configuration=None):  # noqa: E501
        """DetectionQuality - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._aligned = None
        self._compliant = None
        self._non_compliant = None
        self._details_groups = None
        self._details = None
        self._resized = None
        self._score = None
        self.discriminator = None

        if aligned is not None:
            self.aligned = aligned
        if compliant is not None:
            self.compliant = compliant
        if non_compliant is not None:
            self.non_compliant = non_compliant
        if details_groups is not None:
            self.details_groups = details_groups
        if details is not None:
            self.details = details
        if resized is not None:
            self.resized = resized
        if score is not None:
            self.score = score

    @property
    def aligned(self):
        """Gets the aligned of this DetectionQuality.  # noqa: E501

        Returns true if alignment was done. Otherwise, false.  # noqa: E501

        :return: The aligned of this DetectionQuality.  # noqa: E501
        :rtype: bool
        """
        return self._aligned

    @aligned.setter
    def aligned(self, aligned):
        """Sets the aligned of this DetectionQuality.

        Returns true if alignment was done. Otherwise, false.  # noqa: E501

        :param aligned: The aligned of this DetectionQuality.  # noqa: E501
        :type aligned: bool
        """

        self._aligned = aligned

    @property
    def compliant(self):
        """Gets the compliant of this DetectionQuality.  # noqa: E501

        Returns the portrait quality assessment result. True if all the checked characteristics returned values that fit into the range. Otherwise, false.  # noqa: E501

        :return: The compliant of this DetectionQuality.  # noqa: E501
        :rtype: bool
        """
        return self._compliant

    @compliant.setter
    def compliant(self, compliant):
        """Sets the compliant of this DetectionQuality.

        Returns the portrait quality assessment result. True if all the checked characteristics returned values that fit into the range. Otherwise, false.  # noqa: E501

        :param compliant: The compliant of this DetectionQuality.  # noqa: E501
        :type compliant: bool
        """

        self._compliant = compliant

    @property
    def non_compliant(self):
        """Gets the non_compliant of this DetectionQuality.  # noqa: E501

        The array of all the non-compliant assessment characteristics.  # noqa: E501

        :return: The non_compliant of this DetectionQuality.  # noqa: E501
        :rtype: list[FaceQualityConfigName]
        """
        return self._non_compliant

    @non_compliant.setter
    def non_compliant(self, non_compliant):
        """Sets the non_compliant of this DetectionQuality.

        The array of all the non-compliant assessment characteristics.  # noqa: E501

        :param non_compliant: The non_compliant of this DetectionQuality.  # noqa: E501
        :type non_compliant: list[FaceQualityConfigName]
        """

        self._non_compliant = non_compliant

    @property
    def details_groups(self):
        """Gets the details_groups of this DetectionQuality.  # noqa: E501

        The array of the assessment results for each group of characteristics. Includes groupId, name, total, compliantCount.  # noqa: E501

        :return: The details_groups of this DetectionQuality.  # noqa: E501
        :rtype: list[QualityDetailsGroups]
        """
        return self._details_groups

    @details_groups.setter
    def details_groups(self, details_groups):
        """Sets the details_groups of this DetectionQuality.

        The array of the assessment results for each group of characteristics. Includes groupId, name, total, compliantCount.  # noqa: E501

        :param details_groups: The details_groups of this DetectionQuality.  # noqa: E501
        :type details_groups: list[QualityDetailsGroups]
        """

        self._details_groups = details_groups

    @property
    def details(self):
        """Gets the details of this DetectionQuality.  # noqa: E501

        The array of the assessment characteristics that were set in the request. Includes name, range, status, unit, value.  # noqa: E501

        :return: The details of this DetectionQuality.  # noqa: E501
        :rtype: list[QualityDetail]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this DetectionQuality.

        The array of the assessment characteristics that were set in the request. Includes name, range, status, unit, value.  # noqa: E501

        :param details: The details of this DetectionQuality.  # noqa: E501
        :type details: list[QualityDetail]
        """

        self._details = details

    @property
    def resized(self):
        """Gets the resized of this DetectionQuality.  # noqa: E501

        Returns true if the image was resized according to the set dimensions. Otherwise, false.  # noqa: E501

        :return: The resized of this DetectionQuality.  # noqa: E501
        :rtype: bool
        """
        return self._resized

    @resized.setter
    def resized(self, resized):
        """Sets the resized of this DetectionQuality.

        Returns true if the image was resized according to the set dimensions. Otherwise, false.  # noqa: E501

        :param resized: The resized of this DetectionQuality.  # noqa: E501
        :type resized: bool
        """

        self._resized = resized

    @property
    def score(self):
        """Gets the score of this DetectionQuality.  # noqa: E501

        Returns the estimated portrait quality assessment result, a number from 0 to 1, where 1 is for absolute compliance.  # noqa: E501

        :return: The score of this DetectionQuality.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this DetectionQuality.

        Returns the estimated portrait quality assessment result, a number from 0 to 1, where 1 is for absolute compliance.  # noqa: E501

        :param score: The score of this DetectionQuality.  # noqa: E501
        :type score: float
        """

        self._score = score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetectionQuality):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DetectionQuality):
            return True

        return self.to_dict() != other.to_dict()
