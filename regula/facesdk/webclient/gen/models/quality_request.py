# coding: utf-8

"""
    Regula FaceSDK Web API

    Regula FaceSDK Web API  # noqa: E501

    The version of the OpenAPI document: 3.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from regula.facesdk.webclient.gen.configuration import Configuration


class QualityRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'align': 'Align',
        'background': 'list[int]',
        'config': 'QualityConfig'
    }

    attribute_map = {
        'align': 'align',
        'background': 'background',
        'config': 'config'
    }

    def __init__(self, align=None, background=None, config=None, local_vars_configuration=None):  # noqa: E501
        """QualityRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._align = None
        self._background = None
        self._config = None
        self.discriminator = None

        if align is not None:
            self.align = align
        if background is not None:
            self.background = background
        if config is not None:
            self.config = config

    @property
    def align(self):
        """Gets the align of this QualityRequest.  # noqa: E501


        :return: The align of this QualityRequest.  # noqa: E501
        :rtype: Align
        """
        return self._align

    @align.setter
    def align(self, align):
        """Sets the align of this QualityRequest.


        :param align: The align of this QualityRequest.  # noqa: E501
        :type align: Align
        """

        self._align = align

    @property
    def background(self):
        """Gets the background of this QualityRequest.  # noqa: E501


        :return: The background of this QualityRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._background

    @background.setter
    def background(self, background):
        """Sets the background of this QualityRequest.


        :param background: The background of this QualityRequest.  # noqa: E501
        :type background: list[int]
        """

        self._background = background

    @property
    def config(self):
        """Gets the config of this QualityRequest.  # noqa: E501


        :return: The config of this QualityRequest.  # noqa: E501
        :rtype: QualityConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this QualityRequest.


        :param config: The config of this QualityRequest.  # noqa: E501
        :type config: QualityConfig
        """

        self._config = config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualityRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QualityRequest):
            return True

        return self.to_dict() != other.to_dict()
