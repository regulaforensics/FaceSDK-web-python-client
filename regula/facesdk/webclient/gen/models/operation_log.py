# coding: utf-8

"""
    Regula FaceSDK Web API

    Regula FaceSDK Web API  # noqa: E501

    The version of the OpenAPI document: 3.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from regula.facesdk.webclient.gen.configuration import Configuration


class OperationLog(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status_code': 'float',
        'type': 'str',
        'msg': 'str'
    }

    attribute_map = {
        'status_code': 'status_code',
        'type': 'type',
        'msg': 'msg'
    }

    def __init__(self, status_code=None, type=None, msg=None, local_vars_configuration=None):  # noqa: E501
        """OperationLog - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._status_code = None
        self._type = None
        self._msg = None
        self.discriminator = None

        if status_code is not None:
            self.status_code = status_code
        if type is not None:
            self.type = type
        if msg is not None:
            self.msg = msg

    @property
    def status_code(self):
        """Gets the status_code of this OperationLog.  # noqa: E501


        :return: The status_code of this OperationLog.  # noqa: E501
        :rtype: float
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this OperationLog.


        :param status_code: The status_code of this OperationLog.  # noqa: E501
        :type status_code: float
        """

        self._status_code = status_code

    @property
    def type(self):
        """Gets the type of this OperationLog.  # noqa: E501


        :return: The type of this OperationLog.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OperationLog.


        :param type: The type of this OperationLog.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def msg(self):
        """Gets the msg of this OperationLog.  # noqa: E501


        :return: The msg of this OperationLog.  # noqa: E501
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this OperationLog.


        :param msg: The msg of this OperationLog.  # noqa: E501
        :type msg: str
        """

        self._msg = msg

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OperationLog):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OperationLog):
            return True

        return self.to_dict() != other.to_dict()
