# coding: utf-8

"""
    Regula FaceSDK Web API

    Regula FaceSDK Web API  # noqa: E501

    The version of the OpenAPI document: 3.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from regula.facesdk.webclient.gen.configuration import Configuration


class DetectRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'image': 'str',
        'thumbnails': 'bool',
        'attributes': 'bool',
        'only_central_face': 'bool'
    }

    attribute_map = {
        'image': 'image',
        'thumbnails': 'thumbnails',
        'attributes': 'attributes',
        'only_central_face': 'onlyCentralFace'
    }

    def __init__(self, image=None, thumbnails=False, attributes=False, only_central_face=False, local_vars_configuration=None):  # noqa: E501
        """DetectRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._image = None
        self._thumbnails = None
        self._attributes = None
        self._only_central_face = None
        self.discriminator = None

        if image is not None:
            self.image = image
        if thumbnails is not None:
            self.thumbnails = thumbnails
        if attributes is not None:
            self.attributes = attributes
        if only_central_face is not None:
            self.only_central_face = only_central_face

    @property
    def image(self):
        """Gets the image of this DetectRequest.  # noqa: E501

        Base64 encoded image  # noqa: E501

        :return: The image of this DetectRequest.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this DetectRequest.

        Base64 encoded image  # noqa: E501

        :param image: The image of this DetectRequest.  # noqa: E501
        :type image: str
        """

        self._image = image

    @property
    def thumbnails(self):
        """Gets the thumbnails of this DetectRequest.  # noqa: E501

        Enable formatted detections' thumbnails in the response  # noqa: E501

        :return: The thumbnails of this DetectRequest.  # noqa: E501
        :rtype: bool
        """
        return self._thumbnails

    @thumbnails.setter
    def thumbnails(self, thumbnails):
        """Sets the thumbnails of this DetectRequest.

        Enable formatted detections' thumbnails in the response  # noqa: E501

        :param thumbnails: The thumbnails of this DetectRequest.  # noqa: E501
        :type thumbnails: bool
        """

        self._thumbnails = thumbnails

    @property
    def attributes(self):
        """Gets the attributes of this DetectRequest.  # noqa: E501

        Enable face attributions detection, such as age or emotion and etc.  # noqa: E501

        :return: The attributes of this DetectRequest.  # noqa: E501
        :rtype: bool
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this DetectRequest.

        Enable face attributions detection, such as age or emotion and etc.  # noqa: E501

        :param attributes: The attributes of this DetectRequest.  # noqa: E501
        :type attributes: bool
        """

        self._attributes = attributes

    @property
    def only_central_face(self):
        """Gets the only_central_face of this DetectRequest.  # noqa: E501

        True - main face; false - all faces.  # noqa: E501

        :return: The only_central_face of this DetectRequest.  # noqa: E501
        :rtype: bool
        """
        return self._only_central_face

    @only_central_face.setter
    def only_central_face(self, only_central_face):
        """Sets the only_central_face of this DetectRequest.

        True - main face; false - all faces.  # noqa: E501

        :param only_central_face: The only_central_face of this DetectRequest.  # noqa: E501
        :type only_central_face: bool
        """

        self._only_central_face = only_central_face

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetectRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DetectRequest):
            return True

        return self.to_dict() != other.to_dict()
