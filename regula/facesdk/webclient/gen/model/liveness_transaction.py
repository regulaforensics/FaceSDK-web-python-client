# coding: utf-8

"""
    Regula FaceSDK Web API

    Regula FaceSDK Web API # Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core   # noqa: E501

    The version of the OpenAPI document: 4.1.3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from regula.facesdk.webclient.gen.configuration import Configuration


class LivenessTransaction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'code': 'int',
        'config': 'TransactionConfig',
        'elapsed': 'int',
        'portrait': 'str',
        'session_id': 'str',
        'status': 'int',
        'transaction_id': 'str',
        'video': 'str',
        'metadata': '{str: (bool, date, datetime, dict, float, int, list, str, none_type)}',
    }

    attribute_map = {
        'code': 'code',
        'config': 'config',
        'elapsed': 'elapsed',
        'portrait': 'portrait',
        'session_id': 'sessionId',
        'status': 'status',
        'transaction_id': 'transactionId',
        'video': 'video',
        'metadata': 'metadata',
    }

    def __init__(self, code=None, config=None, elapsed=None, portrait=None, session_id=None, status=None, transaction_id=None, video=None, metadata=None, local_vars_configuration=None):  # noqa: E501
        """LivenessTransaction - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._code = None
        self._config = None
        self._elapsed = None
        self._portrait = None
        self._session_id = None
        self._status = None
        self._transaction_id = None
        self._video = None
        self._metadata = None
        self.discriminator = None

        if code is not None:
            self.code = code
        if config is not None:
            self.config = config
        if elapsed is not None:
            self.elapsed = elapsed
        if portrait is not None:
            self.portrait = portrait
        if session_id is not None:
            self.session_id = session_id
        if status is not None:
            self.status = status
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if video is not None:
            self.video = video
        if metadata is not None:
            self.metadata = metadata

    @property
    def code(self):
        """Gets the code of this LivenessTransaction.  # noqa: E501


        :return: The code of this LivenessTransaction.  # noqa: E501
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this LivenessTransaction.


        :param code: The code of this LivenessTransaction.  # noqa: E501
        :type code: int
        """

        self._code = code

    @property
    def config(self):
        """Gets the config of this LivenessTransaction.  # noqa: E501


        :return: The config of this LivenessTransaction.  # noqa: E501
        :rtype: TransactionConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this LivenessTransaction.


        :param config: The config of this LivenessTransaction.  # noqa: E501
        :type config: TransactionConfig
        """

        self._config = config

    @property
    def elapsed(self):
        """Gets the elapsed of this LivenessTransaction.  # noqa: E501


        :return: The elapsed of this LivenessTransaction.  # noqa: E501
        :rtype: int
        """
        return self._elapsed

    @elapsed.setter
    def elapsed(self, elapsed):
        """Sets the elapsed of this LivenessTransaction.


        :param elapsed: The elapsed of this LivenessTransaction.  # noqa: E501
        :type elapsed: int
        """

        self._elapsed = elapsed

    @property
    def portrait(self):
        """Gets the portrait of this LivenessTransaction.  # noqa: E501

        URL for portrait image  # noqa: E501

        :return: The portrait of this LivenessTransaction.  # noqa: E501
        :rtype: str
        """
        return self._portrait

    @portrait.setter
    def portrait(self, portrait):
        """Sets the portrait of this LivenessTransaction.

        URL for portrait image  # noqa: E501

        :param portrait: The portrait of this LivenessTransaction.  # noqa: E501
        :type portrait: str
        """

        self._portrait = portrait

    @property
    def session_id(self):
        """Gets the session_id of this LivenessTransaction.  # noqa: E501


        :return: The session_id of this LivenessTransaction.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this LivenessTransaction.


        :param session_id: The session_id of this LivenessTransaction.  # noqa: E501
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def status(self):
        """Gets the status of this LivenessTransaction.  # noqa: E501

        Whether the liveness detection is confirmed (0) or not (1)  # noqa: E501

        :return: The status of this LivenessTransaction.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LivenessTransaction.

        Whether the liveness detection is confirmed (0) or not (1)  # noqa: E501

        :param status: The status of this LivenessTransaction.  # noqa: E501
        :type status: int
        """

        self._status = status

    @property
    def transaction_id(self):
        """Gets the transaction_id of this LivenessTransaction.  # noqa: E501


        :return: The transaction_id of this LivenessTransaction.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this LivenessTransaction.


        :param transaction_id: The transaction_id of this LivenessTransaction.  # noqa: E501
        :type transaction_id: str
        """

        self._transaction_id = transaction_id

    @property
    def video(self):
        """Gets the video of this LivenessTransaction.  # noqa: E501


        :return: The video of this LivenessTransaction.  # noqa: E501
        :rtype: str
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this LivenessTransaction.


        :param video: The video of this LivenessTransaction.  # noqa: E501
        :type video: str
        """

        self._video = video

    @property
    def metadata(self):
        """Gets the metadata of this LivenessTransaction.  # noqa: E501

        A free-form object containing the request information (server time, client IP, etc.).  # noqa: E501

        :return: The metadata of this LivenessTransaction.  # noqa: E501
        :rtype: {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this LivenessTransaction.

        A free-form object containing the request information (server time, client IP, etc.).  # noqa: E501

        :param metadata: The metadata of this LivenessTransaction.  # noqa: E501
        :type metadata: {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LivenessTransaction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LivenessTransaction):
            return True

        return self.to_dict() != other.to_dict()
