# coding: utf-8

"""
    Regula FaceSDK Web API

    Regula FaceSDK Web API # Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core   # noqa: E501

    The version of the OpenAPI document: 5.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from regula.facesdk.webclient.gen.configuration import Configuration


class DetectionAttributesDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'confidence': 'float',
        'value': 'Any',
    }

    attribute_map = {
        'name': 'name',
        'confidence': 'confidence',
        'value': 'value',
    }

    def __init__(self, name=None, confidence=None, value=None, local_vars_configuration=None):  # noqa: E501
        """DetectionAttributesDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._confidence = None
        self._value = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if confidence is not None:
            self.confidence = confidence
        if value is not None:
            self.value = value

    @property
    def name(self):
        """Gets the name of this DetectionAttributesDetails.  # noqa: E501

        The name of the attribute.  # noqa: E501

        :return: The name of this DetectionAttributesDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DetectionAttributesDetails.

        The name of the attribute.  # noqa: E501

        :param name: The name of this DetectionAttributesDetails.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def confidence(self):
        """Gets the confidence of this DetectionAttributesDetails.  # noqa: E501

        The confidence score for the attribute.  # noqa: E501

        :return: The confidence of this DetectionAttributesDetails.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this DetectionAttributesDetails.

        The confidence score for the attribute.  # noqa: E501

        :param confidence: The confidence of this DetectionAttributesDetails.  # noqa: E501
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def value(self):
        """Gets the value of this DetectionAttributesDetails.  # noqa: E501

        Value.  # noqa: E501

        :return: The value of this DetectionAttributesDetails.  # noqa: E501
        :rtype: Any
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DetectionAttributesDetails.

        Value.  # noqa: E501

        :param value: The value of this DetectionAttributesDetails.  # noqa: E501
        :type value: Any
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetectionAttributesDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DetectionAttributesDetails):
            return True

        return self.to_dict() != other.to_dict()
